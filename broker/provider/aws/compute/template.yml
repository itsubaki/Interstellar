AWSTemplateFormatVersion: '2010-09-09'

Description:
  AWS Compute

Parameters:
  ProjectName:
    Description: ""
    Type: String
  EnvironName:
    Description: ""
    Type: String
  InstanceName:
    Description: ""
    Type: String
  InstanceType:
    Description: ""
    Type: String
    Default: t2.nano
    AllowedValues:
      - t2.nano
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
      - t2.xlarge
      - t2.2xlarge
      - m5.large
      - m5.xlarge
      - m5.2xlarge
      - m5.4xlarge
      - m5.12xlarge
      - m5.24xlarge
  MaxSize:
    Description: ""
    Type: String
    Default: 1
  MinSize:
    Description: ""
    Type: String
    Default: 1
  DesiredCapacity:
    Description: ""
    Type: String
    Default: 1

Resources:
  DNSRecourd:
    Type: AWS::Route53::RecordSet
    Properties:
      Type: A
      AliasTarget:
        DNSName: !GetAtt LoadBalancer.DNSName
        HostedZoneId: !GetAtt LoadBalancer.CanonicalHostedZoneID
      Comment: ""
      HostedZoneName: !Sub
        - ${ProjectName}.${DomainName}.
        - { "DomainName": { "Fn::ImportValue" : {"Fn::Sub": "${ProjectName}-DomainName" } }}
      Name: !Sub
        - ${EnvironName}-${InstanceName}.${ProjectName}.${DomainName}.
        - { "DomainName": { "Fn::ImportValue" : {"Fn::Sub": "${ProjectName}-DomainName" } }}

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: access_logs.s3.enabled
          Value: true
        - Key: access_logs.s3.bucket
          Value: !Sub
            - ${EnvironName}-log.${ProjectName}.${DomainName}
            - { "DomainName": { "Fn::ImportValue" : {"Fn::Sub": "${ProjectName}-DomainName" } }}
        - Key: idle_timeout.timeout_seconds
          Value: 60
      SecurityGroups:
        - { "Fn::ImportValue" : {"Fn::Sub": "${ProjectName}-${EnvironName}-InternetFacingSecurityGroup" } }
      Subnets:
        - { "Fn::ImportValue": !Sub "${ProjectName}-PublicSubnetPrimary" }
        - { "Fn::ImportValue": !Sub "${ProjectName}-PublicSubnetSecondary" }
        - { "Fn::ImportValue": !Sub "${ProjectName}-PublicSubnetTertiary" }
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${EnvironName}-${InstanceName}
        - Key: ProjectName
          Value: !Ref ProjectName
        - Key: EnvironName
          Value: !Ref EnvironName
        - Key: InstanceName
          Value: !Ref InstanceName

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 80
      Protocol: HTTP
      VpcId: { "Fn::ImportValue": !Sub "${ProjectName}-VPC" }
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${EnvironName}-${InstanceName}
        - Key: ProjectName
          Value: !Ref ProjectName
        - Key: EnvironName
          Value: !Ref EnvironName
        - Key: InstanceName
          Value: !Ref InstanceName

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn: { "Fn::ImportValue": !Sub "${ProjectName}-Certificate" }
      DefaultActions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward

  ListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref Listener
      Actions:
        - Type: forward
          TargetGroupArn: !Ref LoadBalancerTargetGroup
      Conditions:
        - Field: path-pattern
          Values:
            - /
      Priority: 1

  LaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: ami-0d74386b
      InstanceType: !Ref InstanceType
      KeyName: !Ref ProjectName
      IamInstanceProfile: { "Fn::ImportValue": !Sub "${ProjectName}-${EnvironName}-InstanceProfile" }
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            DeleteOnTermination: true
            VolumeType: gp2
            VolumeSize: 30
      SecurityGroups:
        - { "Fn::ImportValue" : {"Fn::Sub": "${ProjectName}-${EnvironName}-ApplicationSecurityGroup" } }
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          set -x
          apt-get -y update

  AutoScaling:
    Type: AWS::AutoScaling::AutoScalingGroup
    CreationPolicy:
      ResourceSignal:
        Count:   !Ref InstanceNum
        Timeout: PT20M
      AutoScalingCreationPolicy:
        MinSuccessfulInstancesPercent: 80
    Properties:
      LaunchConfigurationName: !Ref LaunchConfig
      DesiredCapacity: !Ref DesiredCapacity
      MaxSize: !Ref MaxSize
      MinSize: !Ref MinSize
      TargetGroupARNs:
        - !Ref TargetGroup
      VPCZoneIdentifier:
        - { "Fn::ImportValue": !Sub "${ProjectName}-PublicSubnetPrimary" }
        - { "Fn::ImportValue": !Sub "${ProjectName}-PublicSubnetSecondary" }
        - { "Fn::ImportValue": !Sub "${ProjectName}-PublicSubnetTertiary" }
      HealthCheckType: ELB
      HealthCheckGracePeriod: 600
      Tags:
        - Key: Name
          Value: !Sub
            - ${EnvironName}-${InstanceName}.${ProjectName}.${DomainName}
            - { "DomainName": { "Fn::ImportValue" : {"Fn::Sub": "${ProjectName}-DomainName" } }}
        - Key: ProjectName
          Value: !Ref ProjectName
        - Key: EnvironName
          Value: !Ref EnvironName
        - Key: InstanceName
          Value: !Ref InstanceName

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref ReadOnlyIAMRole
        - !Ref RunCommandIAMRole
        - !Ref S3S3BucketIAMRole

  ReadOnlyIAMRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${EnvironName}-readonly.${ProjectName}
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - sts:AssumeRole
            Principal:
              - ec2.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess
        - arn:aws:iam::aws:policy/AmazonSSMReadOnlyAccess

  RunCommandIAMRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${EnvironName}-runcommand.${ProjectName}
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - sts:AssumeRole
            Principal:
              - ec2.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM

  S3BucketIAMRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${EnvironName}-s3bucket.${ProjectName}
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - sts:AssumeRole
            Principal:
              - ec2.amazonaws.com
      Policies:
        PolicyName: !Sub ${EnvironName}-s3bucket.${ProjectName}
        PolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: s3:*
              Resource:
                - !Sub
                  - arn:aws:s3:::${EnvironName}-log.${ProjectName}.${DomainName}
                  - { "DomainName": { "Fn::ImportValue" : {"Fn::Sub": "${ProjectName}-DomainName" } }}
                - !Sub
                  - arn:aws:s3:::${EnvironName}-log.${ProjectName}.${DomainName}/*
                  - { "DomainName": { "Fn::ImportValue" : {"Fn::Sub": "${ProjectName}-DomainName" } }}

  LoadBalancerIAMRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${EnvironName}-loadbalancer.${ProjectName}
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - sts:AssumeRole
            Principal:
              - ec2.amazonaws.com
      Policies:
        PolicyName: !Sub ${EnvironName}-loadbalancer.${ProjectName}
        PolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - ec2:*
                - autoscaling:*
                - elasticloadbalancing:*
                - cloudwatch:GetMetricStatistics
              Resource: * #TODO isolate with EnvironName
